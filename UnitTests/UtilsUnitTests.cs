/*! (c) Copyright 2015 - 2018 Micro Focus or one of its affiliates. */
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Apache License 2.0 - Apache Software Foundation
// www.apache.org
// Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION ...
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using Moq;
using NUnit.Framework;
using OpenQA.Selenium;
using System;
using System.Collections.Generic;
using System.Drawing;
using OpenQA.Selenium.Internal;

namespace LeanFT.Selenium.UnitTests
{
    [TestFixture]
    class UtilsUnitTests
    {
        private Mock<IWebElement> _webElementMock;
        private Mock<IJavaScriptExecutor> _javaScriptExecutorMock;
        private Mock<IWrapsDriver> _wrapsDriverMock;
        private Mock<IWebDriver> _webDriverMock;
        private Mock<ITakesScreenshot> _takesScreenshotMock;
        private Mock<IOptions> _optionsMock;
        private Mock<IWindow> _windowMock;

        [SetUp]
        public void BeforeEach()
        {
            _webElementMock = new Mock<IWebElement>();
            _javaScriptExecutorMock = _webElementMock.As<IJavaScriptExecutor>();
            _wrapsDriverMock = _webElementMock.As<IWrapsDriver>();
            _webDriverMock = new Mock<IWebDriver>();
            _takesScreenshotMock = _webDriverMock.As<ITakesScreenshot>();
            _wrapsDriverMock.SetupGet(wrapsDrive => wrapsDrive.WrappedDriver).Returns(_webDriverMock.Object);
            _optionsMock = new Mock<IOptions>();
            _webDriverMock.Setup(webDriver => webDriver.Manage()).Returns(_optionsMock.Object);
            _windowMock = new Mock<IWindow>();
            _optionsMock.SetupGet(options => options.Window).Returns(_windowMock.Object);
            _takesScreenshotMock.Setup(takesScreenshot => takesScreenshot.GetScreenshot()).Returns(new Screenshot(
                "iVBORw0KGgoAAAANSUhEUgAAA6EAAAPwCAYAAADAiXh4AAAgAElEQVR4nOzdeXhU1eH / 8c + 9s2UlgURBNrFYE1ARdypWEYt73QWq3f3WptiFtj + 7aKWtVbsrbRUp1la7KFAUtdYNpViXoqCsSlBEdgMEAoQks97z + yNEEgiZO8nMnSzv1 / Pk0cyce + 4Jmcy9nzmbZYwxAgAAAADAA3a2GwAAAAAA6DkIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4Bn / uXfWZeXEg / pIv5iYq37F5GAAAAAA6Cmsc++Mm2yc2JiEBvWJ68GKvGycHgAAAACQBX4pKxlUlmVr487snBsAAAAAkB2MhQUAAAAAeCZrPaEAAAAAgJ6HEAoAAAAA8AzDcQEAAAAAnum2PaHf / e53W3z / 29 / +tl2PAwAAAADSxy / TPUMoAAAAAKDzYTguOmzXsxUqLy / f / 1XxrHZl4DxLp5erfPrSg / 4fAAAAQNdhWzLK1he6vqXTyzVq8kjNrKxU5b6vmSMna1T5dBERAQAAABzI + tQddVlLg46MXrw5P1unR0ctna7yiUs1deF0XVDc4glNL58ozaxUxchMnbpcEzVTlZk6AQAAAICM8M + 7OU + qjmvcEktzx / lU0PRMdVzjZkSlU0P7H6 + Oa9wWW / NGtDKKt6k82rR0erkmTj3w0TEtgtzS6eWaPmShpl + wTtPLJ2qqpDFTF2r6BcVqDHjTNWThdF1QvFTTyxdqVGWF9FG9++va9WyFRk1ecFAbJqcpHC5dOFWaPPOAACpJI1VRWdnyZ9ZUTV06WY3NmayZlaO0cN / P1vh9hRqbtEvPVozS / mbvf47gCQAAAHR9fklSgaUrDnym1K8HLono + q3NHiuwdMVWo73S / rD6EaPOtNJuZ10dd2RFpSonPquKUetUsS9c7Xq2QqNGTW8WxD4qrYrKSlUsna7yiTO1tJXnJ05dqJnTKzRVM1VZObKxd / IHz2rh9AtUfMF0VVY2D63a13tZsf / 7dtulqqXSmMuHuCs + 9XFpYaUqixtD5sTyyY1DePf1mk5 / dqKmX1CsXc / +QJNHzlTl9JFqCqRNzwEAAADo + vzjljuaWxTX3EUxzV3U7JlL8jS3yC891aArFklSSA98x5YWNX3fJKDffCegqhmRdpze6kjbu43iCyo0WdNVtUtSa1lryBCN0brWjx01REsnSzMrR + 4vu2Cd1klqtb9w5ERNHTNV6w5ZoAOWTld5827eyc16LSdX7Au9xeo3UtLIUftOP0RDxuij + aPFF0zX / j7UdVq3QNLlaW4nAAAAgKyxVWW0U9rfkdn0deDjF / uk1Q2ae2C5U / waKqP3D3zczRfSY / Ko / XmyuJ9GamljoM2oxjC5YF2zcDyyYv / iRJPbWe3S6c1W2p2upWPS0lgAAAAAnYQtGfXJt3VQQuwr9Wn +/ VN1uv4pI52ao7m3FOiBS5o9lyMNTTmBkkLTYt06aYjLIbFpNnLUZGnqdD2btsC7S89On6oxUxfuC7O / oBMUAAAA6Gb8887zS + G4rjg1V58 / z99irueGZXUHH9HXUoESevWp5iHSVr9TjbTo4OLZcqg5nak + nhHr1mmBpIo0VLV04VSNHNVGTbuqtFRSRmLqyArNnFyuiQfMZ931bEXjIknt7A1d0DRWeOlMTV4gjSGJAgAAAN2Gv + l / RpT5WgTQvevDuv6pQxwVNnq / +ffVMf2 / ThRAO6 + lH612q8kzk0 / J3PWsKkZNVuNCsZNbCa27VLV0skZVHLgS7hhNbb7K7Jip + kWG1vUZWVGpylGNQ2j3G6OpCyvbsfBRsS6omCxNnKjyqZImz9TMydLEjExgBQAAAJAN1qdu35W9fUItf8b2Ce2sq + MCAAAAQE / mt5ibCQAAAADwiJ3tBgAAAAAAeg6 / TBZ7QtkmFAAAAAB6FGvcz3ZkLYUm7FDG5oQCAAAAADofhuMCAAAAADzjFwsTAQAAAAA8QggFAAAAAHiG4bgAAAAAAM9krSfUka1BfbJyagAAAABAlvgTdl5WTjyoj6VfTMzJyrkBAAAAANlhGZPNjUIBAAAAAD0Jc0IBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBnCKEAAAAAAM8QQgEAAAAAniGEAgAAAAA8QwgFAAAAAHiGEAoAAAAA8AwhFAAAAADgGUIoAAAAAMAzhFAAAAAAgGcIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBnCKEAAAAAAM8QQgEAAAAAniGEAgAAAAA8QwgFAAAAAHiGEAoAAAAA8AwhFAAAAADgGUIoAAAAAMAzhFAAAAAAgGcIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBnCKEAAAAAAM8QQgEAAAAAniGEAgAAAAA8QwgFAAAAAHiGEAoAAAAA8AwhFAAAAADgGUIoAAAAAMAzhFAAAAAAgGcIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBnCKEAAAAAAM8QQgEAAAAAniGEAgAAAAA8QwgFAAAAAHiGEAoAAAAA8AwhFAAAAADgGUIoAAAAAMAzhFAAAAAAgGcIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBnCKEAAAAAAM8QQgEAAAAAniGEAgAAAAA8QwgFAAAAAHiGEAoAAAAA8AwhFAAAAADgGUIoAAAAAMAzhFAAAAAAgGcIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBnCKEAAAAAAM8QQgEAAAAAniGEAgAAAAA8QwgFAAAAAHiGEAoAAAAA8AwhFAAAAADgGUIoAAAAAMAzhFAAAAAAgGcIoQAAAAAAzxBCAQAAAACeIYQCAAAAADxDCAUAAAAAeIYQCgAAAADwDCEUAAAAAOAZQigAAAAAwDOEUAAAAACAZwihAAAAAADPEEIBAAAAAJ4hhAIAAAAAPEMIBQAAAAB4hhAKAAAAAPAMIRQAAAAA4BlCKAAAAADAM4RQAAAAAIBn / NluAAB0FfURo407jbbudlRTZ1QblqJxI8eR / D4pFLDUK9dSSYGlvkWWBvS2FeRdFgAAoAVujwDgEKp2Gy16P6HlGxN6Z3NCVbtMahUYR0MO92v4AFsnDPbp1I / 5VJRnZaaxAAAAXYRljEnxrgoAuq / ttUbzVsT14sq41lU7aa3bchyNGBLQuOP9Ome4XzmBtFYPAADQJRBCAUDSio0J / fP1mF55LybLZH66fG7A0qUn + 3XVaQGVFNA7is7l1FlXJy2zaMIcD1oCAOiOGI4LoEd7e1NCD / wnpmUbE5Iky6P12hpiRrMWxvT4GxFdcXpI150RUF6IMAoAALo / QiiAHmnHXqNpz0e1oDKe1XZEHFsz / xfT88uj + sb5OTqrnLdlAADQvXG3A6BHMZKeXx7XH56LqiHWeWYj7Kyz9NPHIhpTntC3LwqqIIdeUQAA0D0RQgH0GPURo988HdVLq7Lb + 9mWBZVxVW5J6KfX5OjovmzlDAAAuh / ucAD0CJt3Opr0YLhTB9AmVXuMvvmXOr28uvO3FQAAIFWEUADd3tubErrxz2Ft3JHeLVdCtqNe + ZYO62VUlGvJZ6Wv / ohj66f / bNC / 3iKIAgCA7oXhuAC6tbfWJXTzPxsUi3VsjuVRJbZO / JhPwwfYGlxqa2BvW6ED9vk0kvaGjTbvNHp / m6O3NyW06IOYdta279yOT8oNdqjZAAAAnQ4hFEC3tWx9Qj + aWa + Y075BH / 2KLV0wIqBxx / vVryh5kLQkFeZYKu9vqby / rYtH + mUU0qrNjp5bEdPzy + KKJtyd21iObv50rj51HG / TAACge + HuBkC3tHabo5vnRBRpRwAd1MfW5z8Z0NnD / PJ1cNKCJWn4AFvDB4T0f2OCemxRTP98Pa6G6KFX5iWAAgCA7ow7HADdzq46o5tn1yscSW0YbG7Q0pfOCujyUwIdDp + tKcyx9IVPBnXJiYFD7lFKAAUAAN0ddzkAuhXHSLc9HtH2PakF0GH9bU25MkeH98r8 / pwlBZZuvTKkT77j02 + fiqo + 3tgrSgAFAAA9AXc6ALqVR16Ladl6lxMv97nslIAmfSoov8frhY8Z7tfR / Wz9cGZEm3fHCaAAAKBH4G4HQLexdpujv74UViq7T10 / JqjPnBFQ5vs / Wzewj617vpijVVscjTral6VWAAAAeIcQCqBbMEa6 + 5mI4ikE0BvGBjVhVCB5wQwryrMIoAAAoMfwePAZAGTGvJVxvbPZcV3 + ytMCGt8JAigAAEBPQwgF0OXFEtKD / 424Ln / CYJ++dm4wa0NwAQAAejJCKIAub96KuLbudle2IGTplstDskmgAAAAWUEIBdClGSPNfj3muvyN5wVVUkACBQAAyBZCKIAubcn6hDbucDcXdFh / W + PYAgUAACCrCKEAurRnl8Zdl / 3KOUFZdIICAABkFSEUQJcViUn / fc / dUNxj + tsacSTboABdhnEavwAA3Q7j0gB0WUvWJxSLuevavOqUAKvhupFIKP5epaLL31L8vdWKb94gs71KZm9YiXhEPn9IVkGOrMP6yT / wSPmPLlPwhJPkP7pM8nWCkG / iMrVLZGr + K7NniRR + X079JhlTKztRL8f4JX + xfLn9pPxyWYUnyir + pKxep0hW9i + J0bi0dH1CyzYk9G6Voy07HNXsTSji2JJxVJzr0 + F9LB3Tz9aJR / p02lCf8oJd + 5Vtwg2KLX1TseVvKf5epRJbNsup2S4TbRzlYIUCsosPl2 / QIPnLhit40qkKHDeyc7zeAADtYhljTLYbAQDt8fvno3picfKe0EDAaO638pXbxW / WMym + ZrXCzzypyIIX5OyuSfl4u1dvhcaOU86Fl8o / 9JgMtLBtpnaZzJa / KLFtjqzotpSPdwIl8h92payB / yer8MQMtLBta7Y6enxxTAtWJdQQdX9ZDtmOzh0R1MRPBDSg9 / 7BTW99kNBNj4STHv / izfmtPn7qrKuTHrtowhzX7TyIMYq9s1wNT8xR9NX5MhH3i4tJja + 3nAsvUe4VE2WXHtb + dgAAsiL7H / sCQDut3ODuxnX00AAB9BBiby9X / YMzFF3yRofqcfbUqOHx2Wp4fLaCJ5 + uvC9 + VYFhx6WplYdmdi9U4v3bpJoXJKndvd12bIecLfdLW + 6Xep8t38d + Kqv4jPQ19BDWbXc0Y35Er7 / fvmGnEcfW00vjem55VFefFtIXzgoq1Mmv7LFVK7X3 / t8rvnxpu + tw9tSoftbf1DBnlnKvmai8z14vKyc3ja0EAGRSJ79UAUDrIjFpzXZHloup7ScexbC9Azm7d6nuvrsVfuGZtNcdffN1Rd98XTnjLlL + 174tu1dR2s + hWLUS794kU / WP9Ndd85ISb46R1XeCfMfcJQXT39MWS0h / fTmqh1 + NSFbHl2dIOLZmLYxp8dqYbh + fl4YWpp + JhFU34w9qeOKf6aszEVX9zL8q8p / nVfijOz354AMA0HEsTASgS1pX7cgy7t7CRgzmra652JLF2vGVazMSQJsLz3taO274jGLL30prvabmJcVfPzkzAbT5ebbOUux / J8nULEhrvdv2GH3zoXo9 / FosLQG0ufe3Sd / 8a50 + 3N25ZtokNm / Urhs / n9YA2qL + rVXa + e0bFH7uqYzUDwBIL + 7MAHRJm3a6G74Y9Dsa1Ie3uibhp5 / QzpsmSTurvTlhdbV2fqdC4Wf / lZbqnC0PKrbkAinyYVrqS8aKb1VsyYVyNt + flvrWbHVU8UCD3q3KXEjcvsfSXU9HMlZ / quJrVmvXN69XfN26jJ7HjsdV++vb1PDowxk9DwCg47gzA9Albdvj7iZ + QB8 / e4Pu0 / DPf6j2rjs8f + O3JdX + 5mdqePSRDtXjbPidnFU3yDaJ9DTMJdsk5FTeKGfD3R2q570qR9 / 9R1i7GzpXL2Umxde9r5qbJsnZvcuzc + 69b6rCTz / u2fkAAKljTiiALmlXvbsb + b69Mp9Az72zLuPnaMujk / NUnNf2zxl + 5knt / ePvPGpR6 / bed7eswl7KOe / ilI91PnxIzns3ZaBVKbThve9L / t6y + 38x5WO31Dj6 / syw9oZ7TgB1du7Qrh9 + Q6qt9fzcu++6U77 + gxQYebLn5wYAJEcIBdAl1bm8mc / P6f7doFtqTJshNLZqpXZPbX8PqN27WHbfAbKCOTLRsJwtW + TsSX0bF0nafdcd8h95lPxlw10fY / a8ofjbk2S381dpQkfIzhksY + fJcurl1K2XFa9qV13xd25UIL9MVtEnXB8Tjkm3zolot8sPTg5UELLUv8RSftBSJGZUtSuhnXWd / HVtHO35 + "));
        }

        [TearDown]
        public void AferEach()
        {
        }

        [Test]
        public void GetSnapshot_ElementIsNull_ArgumentNullExceptionIsThrown()
        {
            Assert.Throws<ArgumentNullException>(() => Utils.GetSnapshot(null));
        }

        [Test]
        public void GetSnapshot_ElementIsVisible_PrepareForScreenshotScriptIsExecuted()
        {
            const string prepareForScreenshotScript = "var rect = arguments[0].getBoundingClientRect();return {left: rect.left,top:rect.top,width:rect.width,height:rect.height};";

            _webElementMock.SetupGet(element => element.Size).Returns(new Size(50, 50));
            _webElementMock.SetupGet(element => element.Location).Returns(new Point(50, 50));

            _windowMock.SetupGet(window => window.Size).Returns(new Size(500, 500));
            _windowMock.SetupGet(window => window.Position).Returns(new Point(0, 0));

            var elementLocationAndSize = new Dictionary<string, object>
            {
                {"left", 0},
                {"top", 0},
                {"width", 20.0},
                {"height", 20.0}
            };

            _javaScriptExecutorMock.Setup(executor => executor.ExecuteScript(It.IsAny<string>(), _webElementMock.Object))
                .Returns(elementLocationAndSize);

            Utils.GetSnapshot(_webElementMock.Object);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(prepareForScreenshotScript, _webElementMock.Object), Times.Once);
        }

        [Test]
        public void GetSnapshot_ElementIsNotVisible_ScreenshotScriptIsExecuted()
        {
            _webElementMock.SetupGet(element => element.Size).Returns(new Size(50, 50));
            _webElementMock.SetupGet(element => element.Location).Returns(new Point(600, 0));

            _windowMock.SetupGet(window => window.Size).Returns(new Size(500, 500));
            _windowMock.SetupGet(window => window.Position).Returns(new Point(0, 0));

            var elementLocationAndSize = new Dictionary<string, object>
            {
                {"left", 0},
                {"top", 0},
                {"width", 20.0},
                {"height", 20.0}
            };

            _javaScriptExecutorMock.Setup(executor => executor.ExecuteScript(It.IsAny<string>(), _webElementMock.Object))
                .Returns(elementLocationAndSize);

            Utils.GetSnapshot(_webElementMock.Object);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(InternalUtils.GetScript("Snapshot.js"), _webElementMock.Object), Times.Once);
        }

        [Test]
        public void GetSnapshot_ScreenshotOfWholeScreenIsTaken()
        {
            _webElementMock.SetupGet(element => element.Size).Returns(new Size(50, 50));
            _webElementMock.SetupGet(element => element.Location).Returns(new Point(50, 50));

            _windowMock.SetupGet(window => window.Size).Returns(new Size(500, 500));
            _windowMock.SetupGet(window => window.Position).Returns(new Point(0, 0));

            var elementLocationAndSize = new Dictionary<string, object>
            {
                {"left", 0},
                {"top", 0},
                {"width", 20.0},
                {"height", 20.0}
            };

            _javaScriptExecutorMock.Setup(executor => executor.ExecuteScript(It.IsAny<string>(), _webElementMock.Object))
                .Returns(elementLocationAndSize);

            Utils.GetSnapshot(_webElementMock.Object);

            _takesScreenshotMock.Verify(takesScreenshot => takesScreenshot.GetScreenshot());
        }

        [Test]
        public void Highlight_ElementIsNull_ArgumentNullExceptionIsThrown()
        {
            Assert.Throws<ArgumentNullException>(() => Utils.Highlight(null));
        }

        [Test]
        public void Highlight_TimeIsNegative_ArgumentExceptionIsThrown()
        {
            Assert.Throws<ArgumentException>(() => Utils.Highlight(_webElementMock.Object, -5));
        }

        [Test]
        public void Highlight_NoTimeProvided_ExecutorExecutesScript_TimeIs3000()
        {
            Utils.Highlight(_webElementMock.Object);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(InternalUtils.GetScript("Highlight.js"), _webElementMock.Object, 3000), Times.Once);
        }

        [Test]
        public void Highlight_SpecificTimeProvided_ExecutorExecutesScript_TimeIsSetToProvided()
        {
            Utils.Highlight(_webElementMock.Object, 5);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(InternalUtils.GetScript("Highlight.js"), _webElementMock.Object, 5), Times.Once);
        }

        [Test]
        public void Highlight_TimeIsZero_ExecutorDoesNotExecuteScript()
        {
            Utils.Highlight(_webElementMock.Object, 0);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(It.IsAny<string>(), _webElementMock.Object, It.IsAny<int>()), Times.Never);
        }

        [Test]
        public void ScrollIntoView_ElementIsNull_ArgumentNullExceptionIsThrown()
        {
            Assert.Throws<ArgumentNullException>(() => Utils.ScrollIntoView(null));
        }

        [Test]
        public void ScrollIntoView_ElementNotVisible_ExecutorExecutesScript()
        {
            _webElementMock.SetupGet(element => element.Size).Returns(new Size(50, 50));
            _webElementMock.SetupGet(element => element.Location).Returns(new Point(600, 0));

            _windowMock.SetupGet(window => window.Size).Returns(new Size(500, 500));
            _windowMock.SetupGet(window => window.Position).Returns(new Point(0, 0));

            Utils.ScrollIntoView(_webElementMock.Object);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(InternalUtils.GetScript("ScrollIntoView.js"), _webElementMock.Object), Times.Once);
        }

        [Test]
        public void ScrollIntoView_ElementVisible_ExecutorDoesNotExecuteScript()
        {
            _webElementMock.SetupGet(element => element.Size).Returns(new Size(50, 50));
            _webElementMock.SetupGet(element => element.Location).Returns(new Point(50, 50));

            _windowMock.SetupGet(window => window.Size).Returns(new Size(500, 500));
            _windowMock.SetupGet(window => window.Position).Returns(new Point(0, 0));

            Utils.ScrollIntoView(_webElementMock.Object);

            _javaScriptExecutorMock.Verify(javaScriptExecutor => javaScriptExecutor.ExecuteScript(It.IsAny<string>(), _webElementMock.Object), Times.Never);
        }
    }
}